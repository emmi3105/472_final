x = "Spotify Endurement",
y = "LastFM Endurement"
) +
theme_minimal() +
# Adjust the font size for the title and the axes
theme(
axis.text = element_text(size = 8),
axis.title = element_text(size = 8),
plot.title = element_text(size = 12)
) +
# Log-transform the axes
scale_x_log10() +
scale_y_log10()
endurement_plot
endurement_plot <- ggplot(endurement_score_result,
aes(x = Spotify_Endurement, y = LastFM_Endurement)) +
geom_point(size = 1, color = "#F8766D") +
geom_point(aes(x = 100, y = 100), color = "#00BA38", size = 3, fill = "#00BA38", shape = 23) +
# Add labels
geom_text(aes(x = 25, y = 30, label = "RS-T100"), size = 3, family = "Arial", color = "#F8766D") +
geom_text(aes(x = 100, y = 100, label = "Taylor Swift"), vjust = 2, size = 3, family = "Arial", color = "#00BA38") +
# Add titles
labs(title = "Spotify Endurement vs. Last FM Endurement",
x = "Spotify Endurement",
y = "LastFM Endurement"
) +
theme_minimal() +
# Adjust the font size for the title and the axes
theme(
axis.text = element_text(size = 8),
axis.title = element_text(size = 8),
plot.title = element_text(size = 12)
)
endurement_plot
# Save the data frame as a global variable
assign(endurement_score_result, endurement_score_result, envir = .GlobalEnv)
# Save the data frame as a global variable
assign("endurement_score_result", endurement_score_result, envir = .GlobalEnv)
# Save the data frame as an RData file in the current working directory
save(endurement_score_result, file = "data/endurement_score_result.RData")
# Load the data from the RData file
load("data/endurement_score_result.RData")
# Make a copy of the data frame
endurement_score_data <- data.frame(endurement_score_result)
# Plot the endurement scores (on a scale of 1 to Taylor Swift)
endurement_plot <- ggplot(endurement_score_data,
aes(x = Spotify_Endurement, y = LastFM_Endurement)) +
geom_point(size = 1, color = "#F8766D") +
geom_point(aes(x = 100, y = 100), color = "#00BA38", size = 3, fill = "#00BA38", shape = 23) +
# Add labels
geom_text(aes(x = 25, y = 30, label = "RS-T100"), size = 3, family = "Arial", color = "#F8766D") +
geom_text(aes(x = 100, y = 100, label = "Taylor Swift"), vjust = 2, size = 3, family = "Arial", color = "#00BA38") +
# Add titles
labs(title = "Spotify Endurement vs. Last FM Endurement",
x = "Spotify Endurement",
y = "LastFM Endurement"
) +
theme_minimal() +
# Adjust the font size for the title and the axes
theme(
axis.text = element_text(size = 8),
axis.title = element_text(size = 8),
plot.title = element_text(size = 12)
)
endurement_plot
endurement_plot <- ggplot(endurement_score_data,
aes(x = Spotify_Endurement, y = LastFM_Endurement)) +
geom_point(size = 1, color = "#F8766D") +
geom_point(aes(x = 100, y = 100), color = "#00BA38", size = 3, fill = "#00BA38", shape = 23) +
# Add labels
geom_text(aes(x = 25, y = 30, label = "RS-T100"), size = 3, family = "Arial", color = "#F8766D") +
geom_text(aes(x = 100, y = 100, label = "Taylor Swift"), vjust = 2, hjust = 1, size = 3, family = "Arial", color = "#00BA38") +
# Add titles
labs(title = "Spotify Endurement vs. Last FM Endurement",
x = "Spotify Endurement",
y = "LastFM Endurement"
) +
theme_minimal() +
# Adjust the font size for the title and the axes
theme(
axis.text = element_text(size = 8),
axis.title = element_text(size = 8),
plot.title = element_text(size = 12)
)
endurement_plot
tables
check_table(db, "top_artists_2023_USA_df")
artists_fm_data_spotify <- data.frame(
Artist_Name = character(0),
Playcount = numeric(0),
Listeners = numeric(0),
On_Tour = numeric(0),
stringsAsFactors = FALSE
)
View(artists_fm_data_spotify)
View(top_artists_2023)
result_list <- lapply(top_artists_2023$Artist_Name, get_artist_info_fm)
View(result)
View(result_list)
artists_fm_data <- data.frame(
Artist_Name = character(0),
Playcount = numeric(0),
Listeners = numeric(0),
On_Tour = numeric(0),
stringsAsFactors = FALSE
)
result_list <- lapply(top_artists_2023$Artist_Name, get_artist_info_fm)
artists_fm_data <- do.call(rbind, result_list)
View(artists_fm_data)
# Format the data
artists_fm_data <- artists_fm_data %>%
mutate(Spotify_Artist_ID = ifelse(Artist_Name %in% top_artists_2023$Artist_Name,
top_artists_2023$Spotify_Artist_ID[match(Artist_Name, top_artists_2023$Artist_Name)],
NA),
Playcount = as.numeric(Playcount),
Listeners = as.numeric(Listeners)
)
1942366324
ts_playcount_fm
top_artists_2023$Listeners_LastFM <- ifelse(top_artists_2023$Spotify_Artist_ID %in%artists_fm_data$Spotify_Artist_ID,
artists_fm_data$Listeners[match(top_artists_2023$Spotify_Artist_ID, artists_fm_data$Spotify_Artist_ID)],
NA)
top_artists_2023$Playcount_LastFM <- ifelse(top_artists_2023$Spotify_Artist_ID %in%artists_fm_data$Spotify_Artist_ID,
artists_fm_data$Playcount[match(top_artists_2023$Spotify_Artist_ID, artists_fm_data$Spotify_Artist_ID)],
NA)
top_artists_2023$On_Tour <- ifelse(top_artists_2023$Spotify_Artist_ID %in%artists_fm_data$Spotify_Artist_ID,
artists_fm_data$On_Tour[match(top_artists_2023$Spotify_Artist_ID, artists_fm_data$Spotify_Artist_ID)],
NA)
View(top_artists_2023)
# Write top_artists_2023 to the relational database
dbWriteTable(db, "top_artists_2023_USA_df", top_artists_2023, overwrite = TRUE)
# Call check_table on "top_artists_2023_USA_df"
check_table(db, "top_artists_2023_USA_df")
endurement_score_query_rs100 <-  "
SELECT Spotify_Artist_ID, Followers, Popularity, Listeners_LastFM, Playcount_LastFM
FROM top_hundred_artists_df
;
"
endurement_score_query_spotify <-  "
SELECT Spotify_Artist_ID, Followers, Popularity, Listeners_LastFM, Playcount_LastFM
FROM top_artists_2023_USA_df
;
"
# Execute the queries
endurement_score_result_rs100 <- dbGetQuery(db, endurement_score_query_rs100)
endurement_score_result_spotify <- dbGetQuery(db, endurement_score_query_spotify)
# Add indicators and bind the data frames
endurement_score_result_rs100$Appearance <- "Rolling Stones Top 100"
endurement_score_result_spotify$Appearance <- "Spotify Top 100 2023"
endurement_score_result <- rbind(endurement_score_result_rs100, endurement_score_result_spotify)
endurement_score_result <- endurement_score_result %>%
mutate(Followers = ifelse(is.na(Followers), 1, Followers),
Popularity = ifelse(0, 1, Popularity),
Listeners_LastFM = ifelse(is.na(Listeners_LastFM), 1, Listeners_LastFM),
Playcount_LastFM = ifelse(is.na(Playcount_LastFM), 1, Playcount_LastFM),
Spotify_Endurement = as.numeric(Followers) * as.numeric(Popularity),
LastFM_Endurement = as.numeric(Listeners_LastFM) * as.numeric(Playcount_LastFM))
# Taylor Swift Endurement Score
ts_data <- get_artist_info("06HL4z0CvFAxyc27GXpf02")
ts_followers <- as.numeric(ts_data$followers)
ts_popularity <- as.numeric(ts_data$popularity)
ts_fm_data <- get_artists_fm("Taylor Swift")
ts_listeners_fm <- as.numeric(ts_fm_data$artist$stats$listeners)
ts_playcount_fm <- as.numeric(ts_fm_data$artist$stats$playcount)
ts_spotify_endurement = ts_followers * ts_popularity
ts_lastfm_endurement = ts_listeners_fm * ts_playcount_fm
endurement_score_result <- endurement_score_result %>%
mutate(Spotify_Endurement = Spotify_Endurement/ts_spotify_endurement * 100,
LastFM_Endurement = LastFM_Endurement/ts_lastfm_endurement * 100)
# Execute the queries
endurement_score_result_rs100 <- dbGetQuery(db, endurement_score_query_rs100)
endurement_score_result_spotify <- dbGetQuery(db, endurement_score_query_spotify)
# Add indicators and bind the data frames
endurement_score_result_rs100$Appearance <- "Rolling Stones Top 100"
endurement_score_result_spotify$Appearance <- "Spotify Top 100 2023"
endurement_score_result <- rbind(endurement_score_result_rs100, endurement_score_result_spotify)
endurement_score_result <- endurement_score_result %>%
mutate(Followers = ifelse(is.na(Followers), 1, Followers),
Popularity = ifelse(0, 1, Popularity),
Listeners_LastFM = ifelse(is.na(Listeners_LastFM), 1, Listeners_LastFM),
Playcount_LastFM = ifelse(is.na(Playcount_LastFM), 1, Playcount_LastFM),
Spotify_Endurement = as.numeric(Followers) * as.numeric(Popularity),
LastFM_Endurement = as.numeric(Listeners_LastFM) * as.numeric(Playcount_LastFM))
endurement_score_result_rs100 <- dbGetQuery(db, endurement_score_query_rs100)
endurement_score_result_spotify <- dbGetQuery(db, endurement_score_query_spotify)
View(endurement_score_result_rs100)
View(endurement_score_result_spotify)
endurement_score_result <- endurement_score_result %>%
mutate(Followers = ifelse(is.na(Followers), 1, Followers),
Popularity = ifelse(0, 1, Popularity),
Listeners_LastFM = ifelse(is.na(Listeners_LastFM), 1, Listeners_LastFM),
Playcount_LastFM = ifelse(is.na(Playcount_LastFM), 1, Playcount_LastFM),
Spotify_Endurement = as.numeric(Followers) * as.numeric(Popularity),
LastFM_Endurement = as.numeric(Listeners_LastFM) * as.numeric(Playcount_LastFM))
# Execute the queries
endurement_score_result_rs100 <- dbGetQuery(db, endurement_score_query_rs100)
endurement_score_result_spotify <- dbGetQuery(db, endurement_score_query_spotify)
# Add indicators and bind the data frames
endurement_score_result_rs100$Appearance <- "Rolling Stones Top 100"
endurement_score_result_spotify$Appearance <- "Spotify Top 100 2023"
endurement_score_result <- rbind(endurement_score_result_rs100, endurement_score_result_spotify)
endurement_score_result <- endurement_score_result %>%
mutate(Followers = ifelse(is.na(Followers), 1, Followers),
Popularity = ifelse(Popularity == 0, 1, Popularity),
Listeners_LastFM = ifelse(is.na(Listeners_LastFM), 1, Listeners_LastFM),
Playcount_LastFM = ifelse(is.na(Playcount_LastFM), 1, Playcount_LastFM),
Spotify_Endurement = as.numeric(Followers) * as.numeric(Popularity),
LastFM_Endurement = as.numeric(Listeners_LastFM) * as.numeric(Playcount_LastFM))
top_hundred_artists <- top_hundred_artists %>%
mutate(Spotify_Artist_ID = ifelse(Artist_Name == "Parliament Funcadelic", "6XswoC68grx55in1WQnJ7E", Spotify_Artist_ID))
top_hundred_artists <- top_hundred_artists %>%
mutate(Spotify_Artist_ID = ifelse(Artist_Name == "Parliament and Funcadelic", "6XswoC68grx55in1WQnJ7E", Spotify_Artist_ID))
top_hundred_artists <- top_hundred_artists %>%
mutate(Spotify_Artist_ID = ifelse(Artist_Name == "Parliament and Funkadelic", "6XswoC68grx55in1WQnJ7E", Spotify_Artist_ID))
# Apply the function to the entire "Artist_Name" column in the data frame
result <- lapply(top_hundred_artists$Spotify_Artist_ID, get_artist_info)
# Extract individual elements
top_hundred_artists$Followers <- sapply(result, function(x) x$followers)
top_hundred_artists$Genres <- sapply(result, function(x) x$genres)
top_hundred_artists$Popularity <- sapply(result, function(x) x$popularity)
# Remove the row names
top_hundred_artists <- data.frame(top_hundred_artists, row.names = NULL)
# Transform the "Genres" column into type character
top_hundred_artists$Genres <- sapply(top_hundred_artists$Genres, function(x) paste(x, collapse = ","))
# Check for HTTP errors
if (http_error(auth_response)) {
print(status_code(auth_response))
print(content(auth_response, "text"))
} else {
# Extract the access token from the response
access_token <- httr::content(auth_response)$access_token
}
access_token
auth_response <- httr::POST(
'https://accounts.spotify.com/api/token',
add_headers(
Authorization = paste0('Basic ', base64_credentials),
'Content-Type' = 'application/x-www-form-urlencoded'
),
body = list(grant_type = 'client_credentials'),
encode = 'form'
)
# Check for HTTP errors
if (http_error(auth_response)) {
print(status_code(auth_response))
print(content(auth_response, "text"))
} else {
# Extract the access token from the response
access_token <- httr::content(auth_response)$access_token
}
# Apply the function to the entire "Artist_Name" column in the data frame
result <- lapply(top_hundred_artists$Spotify_Artist_ID, get_artist_info)
top_hundred_artists$Followers <- sapply(result, function(x) x$followers)
top_hundred_artists$Genres <- sapply(result, function(x) x$genres)
top_hundred_artists$Popularity <- sapply(result, function(x) x$popularity)
top_hundred_artists <- data.frame(top_hundred_artists, row.names = NULL)
# Transform the "Genres" column into type character
top_hundred_artists$Genres <- sapply(top_hundred_artists$Genres, function(x) paste(x, collapse = ","))
# Create an empty data frame for the top tracks
album_data <- data.frame(
Spotify_Artist_ID = character(0),
Artist_Name = character(0),
Spotify_Album_ID = character(0),
Album_Name = character(0),
Album_Release_Date = character(0),
Number_of_Tracks = numeric(0),
stringsAsFactors = FALSE
)
result_list <- lapply(top_hundred_artists$Spotify_Artist_ID, get_albums)
album_data <- do.call(rbind, result_list)
album_data <- album_data %>%
mutate(
is_full_date = grepl("\\d{4}-\\d{2}-\\d{2}", Album_Release_Date),
Album_Release_Date = case_when(
is_full_date ~ as.Date(Album_Release_Date, format = "%Y-%m-%d"),
TRUE ~ as.Date(paste0(Album_Release_Date, "-01-01"), format = "%Y-%m-%d")
)
)
# Remove the temporary column
album_data$is_full_date <- NULL
# Group by Artist_ID and find the latest album release date
Latest_Album_Release <- album_data %>%
group_by(Spotify_Artist_ID) %>%
summarize(Latest_Album_Release = max(Album_Release_Date, na.rm = TRUE))
# Merge the result back into top_hundred_artists
top_hundred_artists <- merge(top_hundred_artists, Latest_Album_Release, by = "Spotify_Artist_ID", all.x = TRUE)
top_hundred_artists$Latest_Album_Release <- as.character(top_hundred_artists$Latest_Album_Release)
top_hundred_artists <- top_hundred_artists %>%
select(-Latest_Album_Release.x) %>%  # Replace ColumnToDelete with the actual column name to delete
rename(Latest_Album_Release= Latest_Album_Release.y)
top_hundred_artists$Latest_Album_Release <- as.character(top_hundred_artists$Latest_Album_Release)
# 4) Get the artist top tracks
# Create an empty data frame for the top tracks
top_tracks_data <- data.frame(
Spotify_Artist_ID = character(0),
Artist_Name = character(0),
Spotify_Track_ID = character(0),
Track_Name = character(0),
Track_Popularity = numeric(0),
Track_Duration = numeric(0),
Album_Release_Date = character(0),
stringsAsFactors = FALSE
)
# Function that queries the API for each artist's top track data given their ID
get_track_data <- function(the_artist_id, market="US") {
# Define the Spotify API endpoint for getting an artist's top tracks
top_tracks_url <- paste0('https://api.spotify.com/v1/artists/', the_artist_id, '/top-tracks?market=', market)
# Set up the request with the access token
top_tracks_response <- GET(
top_tracks_url,
add_headers(Authorization = paste0('Bearer ', access_token))
)
# Extract the top tracks from the response
top_tracks <- content(top_tracks_response, "parsed")
return(top_tracks)
}
# Function that gets further info on the top tracks given the artist ID and using the function get_track_data
get_top_tracks <- function(the_artist_id) {
# Get the data given the artist ID
top_tracks <- get_track_data(the_artist_id)
# Loop through the top tracks for each artist
if (!is.null(top_tracks$tracks) && length(top_tracks$tracks) > 0) {
# Enter the loop
for (i in seq(length(top_tracks$tracks))) {
# Calculate Collaboration value for each song
collaboration_value <- ifelse(length(top_tracks$tracks[[i]]$artists) > 1, 1, 0)
# Check and extract values, appending NA if a value is missing
top_tracks_data <- rbind(top_tracks_data, data.frame(
Spotify_Artist_ID = ifelse(!is.null(top_tracks$tracks[[i]]$artists[[1]]$id), the_artist_id, NA),
Artist_Name = ifelse(!is.null(top_tracks$tracks[[i]]$artists[[1]]$name), top_tracks$tracks[[i]]$artists[[1]]$name, NA),
Spotify_Track_ID = ifelse(!is.null(top_tracks$tracks[[i]]$id), top_tracks$tracks[[i]]$id, NA),
Track_Name = ifelse(!is.null(top_tracks$tracks[[i]]$name), top_tracks$tracks[[i]]$name, NA),
Track_Popularity = ifelse(!is.null(top_tracks$tracks[[i]]$popularity), top_tracks$tracks[[i]]$popularity, NA),
Track_Duration = ifelse(!is.null(top_tracks$tracks[[i]]$duration_ms), top_tracks$tracks[[i]]$duration_ms, NA),
Album_Release_Date = ifelse(!is.null(top_tracks$tracks[[i]]$album$release_date), top_tracks$tracks[[i]]$album$release_date, NA),
Collaboration = collaboration_value
))
}
} else {
top_tracks_data <- rbind(top_tracks_data, data.frame(
Spotify_Artist_ID = the_artist_id,
Artist_Name = NA,
Spotify_Track_ID = NA,
Track_Name = NA,
Track_Popularity = NA,
Track_Duration = NA,
Album_Release_Date = NA,
Collaboration = NA
))
}
return(top_tracks_data)
}
result_list <- lapply(top_hundred_artists$Spotify_Artist_ID, get_top_tracks)
top_tracks_data <- do.call(rbind, result_list)
# Clean the top_tracks_data
top_tracks_data <- top_tracks_data %>%
mutate(
is_full_date = grepl("\\d{4}-\\d{2}-\\d{2}", Album_Release_Date),
Album_Release_Date = case_when(
is_full_date ~ as.Date(Album_Release_Date, format = "%Y-%m-%d"),
TRUE ~ as.Date(paste0(Album_Release_Date, "-01-01"), format = "%Y-%m-%d")
)
)
# Remove the temporary column
top_tracks_data$is_full_date <- NULL
# Write top_tracks_data to the relational database
dbWriteTable(db, "top_tracks_df", top_tracks_data, overwrite = TRUE)
# Call check_table on "top_tracks_df"
check_table(db, "top_tracks_df")
View(certified_singles)
View(certified_albums)
# We have missing values for Parliament and Funkadelic
pf_dt <- get_artist_info_fm("Parliament Funkadelic")
# We have missing values for Parliament and Funkadelic
pf_dt <- get_artists_fm("Parliament Funkadelic")
View(pf_dt)
pf_dt$artist$stats$listeners
top_hundred_artists <- top_hundred_artists %>%
mutate(Listeners_LastFM = ifelse(Artist_Name == "Parliament and Funkadelic", pf_dt$artist$stats$listeners, Listeners_LastFM))
pf_dt$artist$stats$playcount
pf_dt$artist$ontour
top_hundred_artists <- top_hundred_artists %>%
mutate(Listeners_LastFM = ifelse(Artist_Name == "Parliament and Funkadelic", pf_dt$artist$stats$listeners, Listeners_LastFM),
Playcount_LastFM = ifelse(Artist_Name == "Parliament and Funkadelic", pf_dt$artist$stats$playcount, Playcount_LastFM),
On_Tour = ifelse(Artist_Name == "Parliament and Funkadelic", pf_dt$artist$ontour, On_Tour))
# Write top_hundred_artists to the relational database
dbWriteTable(db, "top_hundred_artists_df", top_hundred_artists, overwrite = TRUE)
# Call check_table on "top_hundred_artists_df"
check_table(db, "top_hundred_artists_df")
endurement_score_query_rs100 <-  "
SELECT Spotify_Artist_ID, Followers, Popularity, Listeners_LastFM, Playcount_LastFM
FROM top_hundred_artists_df
;
"
endurement_score_query_spotify <-  "
SELECT Spotify_Artist_ID, Followers, Popularity, Listeners_LastFM, Playcount_LastFM
FROM top_artists_2023_USA_df
;
"
# Execute the queries
endurement_score_result_rs100 <- dbGetQuery(db, endurement_score_query_rs100)
endurement_score_result_spotify <- dbGetQuery(db, endurement_score_query_spotify)
# Add indicators and bind the data frames
endurement_score_result_rs100$Appearance <- "Rolling Stones Top 100"
endurement_score_result_spotify$Appearance <- "Spotify Top 100 2023"
endurement_score_result <- rbind(endurement_score_result_rs100, endurement_score_result_spotify)
endurement_score_result <- endurement_score_result %>%
mutate(Followers = ifelse(is.na(Followers), 1, Followers),
Popularity = ifelse(is.na(Followers), 1, Popularity),
Listeners_LastFM = ifelse(is.na(Listeners_LastFM), 1, Listeners_LastFM),
Playcount_LastFM = ifelse(is.na(Playcount_LastFM), 1, Playcount_LastFM),
Spotify_Endurement = as.numeric(Followers) * as.numeric(Popularity),
LastFM_Endurement = as.numeric(Listeners_LastFM) * as.numeric(Playcount_LastFM))
# Taylor Swift Endurement Score
ts_data <- get_artist_info("06HL4z0CvFAxyc27GXpf02")
ts_followers <- as.numeric(ts_data$followers)
ts_popularity <- as.numeric(ts_data$popularity)
ts_fm_data <- get_artists_fm("Taylor Swift")
ts_listeners_fm <- as.numeric(ts_fm_data$artist$stats$listeners)
ts_playcount_fm <- as.numeric(ts_fm_data$artist$stats$playcount)
ts_spotify_endurement = ts_followers * ts_popularity
ts_lastfm_endurement = ts_listeners_fm * ts_playcount_fm
endurement_score_result <- endurement_score_result %>%
mutate(Spotify_Endurement = Spotify_Endurement/ts_spotify_endurement * 100,
LastFM_Endurement = LastFM_Endurement/ts_lastfm_endurement * 100)
endurement_score_result <- endurement_score_result %>%
mutate(LastFM_Endurement = as.numeric(format(LastFM_Endurement, scientific = FALSE)))
# Save the data frame as a global variable
assign("endurement_score_result", endurement_score_result, envir = .GlobalEnv)
# Save the data frame as an RData file in the current working directory
save(endurement_score_result, file = "data/endurement_score_result.RData")
# Load the data from the RData file
load("data/endurement_score_result.RData")
# Make a copy of the data frame
endurement_score_data <- data.frame(endurement_score_result)
View(endurement_score_data)
typeof(endurement_score_data$LastFM_Endurement)
manual_colors <- c("Rolling Stones Top 100" = "#F8766D",
"Spotify Top 100 2023" = "#00BFC4")
# Plot the endurement scores (on a scale of 1 to Taylor Swift)
endurement_plot <- ggplot(endurement_score_data,
aes(x = Spotify_Endurement, y = LastFM_Endurement, color = factor(Appearance))) +
geom_point(size = 1) +
geom_point(aes(x = 100, y = 100), color = "#00BA38", size = 3, fill = "#00BA38", shape = 23) +
# Add labels
geom_text(aes(x = 25, y = 30, label = "RS-T100"), size = 3, family = "Arial", color = "#F8766D") +
geom_text(aes(x = 100, y = 100, label = "Taylor Swift"), vjust = 2, hjust = 1, size = 3, family = "Arial", color = "#00BA38") +
# Add titles
labs(title = "Spotify Endurement vs. Last FM Endurement",
x = "Spotify Endurement",
y = "LastFM Endurement"
) +
theme_minimal() +
# Adjust the font size for the title and the axes
theme(
axis.text = element_text(size = 8),
axis.title = element_text(size = 8),
plot.title = element_text(size = 12)
)+
# Manually set colors
scale_color_manual(values = manual_colors)
endurement_plot
# Plot the endurement scores (on a scale of 1 to Taylor Swift)
endurement_plot <- ggplot(endurement_score_data,
aes(x = Spotify_Endurement, y = LastFM_Endurement, color = factor(Appearance))) +
geom_point(size = 1) +
#geom_point(aes(x = 100, y = 100), color = "#00BA38", size = 3, fill = "#00BA38", shape = 23) +
# Add labels
geom_text(aes(x = 25, y = 30, label = "RS-T100"), size = 3, family = "Arial", color = "#F8766D") +
geom_text(aes(x = 100, y = 100, label = "Taylor Swift"), vjust = 2, hjust = 1, size = 3, family = "Arial", color = "#00BA38") +
# Add titles
labs(title = "Spotify Endurement vs. Last FM Endurement",
x = "Spotify Endurement",
y = "LastFM Endurement"
) +
theme_minimal() +
# Adjust the font size for the title and the axes
theme(
axis.text = element_text(size = 8),
axis.title = element_text(size = 8),
plot.title = element_text(size = 12)
)+
# Manually set colors
scale_color_manual(values = manual_colors)
endurement_plot
manual_colors <- c("Rolling Stones Top 100" = "#F8766D",
"Spotify Top 100 2023" = "#00BFC4")
manual_labels <- c("Rolling Stones Top 100" = "Rolling Stones Top 100",
"Spotify Top 100 2023" = "Spotify Top 50 from 2023")
# Plot the endurement scores (on a scale of 1 to Taylor Swift)
endurement_plot <- ggplot(endurement_score_data,
aes(x = Spotify_Endurement, y = LastFM_Endurement, color = factor(Appearance))) +
geom_point(size = 1) +
geom_point(aes(x = 100, y = 100), color = "#00BA38", size = 3, fill = "#00BA38", shape = 23) +
# Add labels
geom_text(aes(x = 25, y = 30, label = "RS-T100"), size = 3, family = "Arial", color = "#F8766D") +
geom_text(aes(x = 100, y = 100, label = "Taylor Swift"), vjust = 2, hjust = 1, size = 3, family = "Arial", color = "#00BA38") +
# Add titles
labs(title = "Spotify Endurement vs. Last FM Endurement",
x = "Spotify Endurement",
y = "LastFM Endurement"
) +
theme_minimal() +
# Adjust the font size for the title and the axes
theme(
axis.text = element_text(size = 8),
axis.title = element_text(size = 8),
plot.title = element_text(size = 12)
)+
# Manually set colors
scale_color_manual(values = manual_colors, labels = manual_labels)
endurement_plot
